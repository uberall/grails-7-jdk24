buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://repo.grails.org/grails/restricted' }
        maven { url "https://repo.grails.org/grails/core/" }
    }
    dependencies { // Not Published to Gradle Plugin Portal
        classpath "cloud.wondrify:asset-pipeline-gradle"
        classpath platform("org.apache.grails:grails-bom:$grailsVersion")
        classpath "org.apache.grails:grails-data-hibernate5"
        classpath "org.apache.grails:grails-data-hibernate5-dbmigration"
        classpath "org.apache.grails:grails-gradle-plugins"
    }
}

plugins {
    id "war"
    id "idea"
    id "eclipse"
    id "codenarc"
}

// Not Published to Gradle Plugin Portal
apply plugin: "org.apache.grails.gradle.grails-web"
apply plugin: "org.apache.grails.gradle.grails-gsp"
apply plugin: "cloud.wondrify.asset-pipeline"

configurations.configureEach {
    resolutionStrategy {
        force 'com.google.protobuf:protobuf-java:3.19.6'
    }
}

group = "com.uberall"

repositories {
    // Order fastest & most-used first
    mavenLocal()
    mavenCentral()
    // GitHub Packages (restrict to uberall groups to avoid wide metadata queries)
    maven {
        url "https://maven.pkg.github.com/uberall/*"
        credentials {
            username = System.getenv("GITHUB_USER") ?: githubUser
            password = System.getenv("GITHUB_TOKEN") ?: githubToken

            if (!username || !password) {
                println("================================================")
                println("= YOU NEED TO SET GITHUB_USER AND GITHUB_TOKEN =")
                println("= IN ORDER TO PULL FROM GITHUB PACKAGES        =")
                println("================================================")
            }
        }
        // Narrow repository content to reduce metadata lookups
        content {
            includeGroupByRegex "com\\.uberall(\\..*)?"
            includeGroup "com.uberall.peon"
            includeGroup "cloud.wondrify"
        }
    }
    maven {
        url "https://gitlab.com/api/v4/projects/59889056/dependency_proxy/packages/maven"
        name "GitLab Dependency Proxy"
        credentials(PasswordCredentials) {
            username = 'gitlab-ci-token'
            password = System.getenv("CI_JOB_TOKEN")
        }
        authentication {
            basic(BasicAuthentication)
        }
    }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://jaspersoft.jfrog.io/artifactory/third-party-ce-artifacts" }
    maven {
        url "https://gitlab.com/api/v4/groups/momentfeed/-/packages/maven"
        name "GitLab"
        credentials(HttpHeaderCredentials) {
            name = "Private-Token"
            value = project.findProperty("gitlab.token.value")?.toString() ?: System.getenv("GITLAB_COM_TOKEN")

            if (!value) {
                println("===================================================================")
                println("= YOU NEED TO SET GITLAB_COM_TOKEN or gitlab.token.value IN ORDER =")
                println("= TO PULL FROM GITLAB CLOUD PACKAGES. MINIMUM SCOPE: read_api     =")
                println("= CREATE HERE https://gitlab.com/-/profile/personal_access_tokens =")
                println("===================================================================")
            }
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}

dependencies {
    profile "org.apache.grails.profiles:web"
    developmentOnly "org.springframework.boot:spring-boot-devtools" // Spring Boot DevTools may cause performance slowdowns or compatibility issues on larger applications
    testAndDevelopmentOnly "org.webjars.npm:bootstrap"
    testAndDevelopmentOnly "org.webjars.npm:bootstrap-icons"
    testAndDevelopmentOnly "org.webjars.npm:jquery"
    implementation platform("org.apache.grails:grails-bom:$grailsVersion")
    implementation "org.apache.grails:grails-cache"
    implementation "org.apache.grails:grails-core"
    implementation "org.apache.grails:grails-data-hibernate5"
    implementation "org.apache.grails:grails-data-hibernate5-dbmigration"
    implementation "org.apache.grails:grails-databinding"
    implementation "org.apache.grails:grails-events"
    implementation "org.apache.grails:grails-gsp"
    implementation "org.apache.grails:grails-interceptors"
    implementation "org.apache.grails:grails-layout"
    implementation "org.apache.grails:grails-logging"
    implementation "org.apache.grails:grails-rest-transforms"
    implementation "org.apache.grails:grails-scaffolding"
    implementation "org.apache.grails:grails-services"
    implementation "org.apache.grails:grails-url-mappings"
    implementation "org.apache.grails:grails-web-boot"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    console "org.apache.grails:grails-console"
    runtimeOnly "cloud.wondrify:asset-pipeline-grails"
    runtimeOnly "com.mysql:mysql-connector-j"
    runtimeOnly "com.zaxxer:HikariCP"
    runtimeOnly "org.fusesource.jansi:jansi"

    //grails plugins
    implementation("org.grails:grails-async-gpars:5.0.2") {
        exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
    implementation 'org.grails.plugins:grails-mail:5.0.2'
    implementation "org.grails.plugins:sentry:11.7.25"
    //implementation 'org.grails.plugins:csv:1.0.1'
    //implementation 'org.grails.plugins:oauth:4.0.0'
    //implementation 'org.grails.plugins:redis:2.0.5'

    // AWS dependencies
    implementation "software.amazon.awssdk:iam-policy-builder:${awsSdkVersion}"
    implementation "software.amazon.awssdk:s3:${awsSdkVersion}"
    implementation "software.amazon.awssdk:core:${awsSdkVersion}"
    implementation "software.amazon.awssdk:quicksight:${awsSdkVersion}"
    implementation "software.amazon.awssdk:lambda:${awsSdkVersion}"

    // Localstack testing
    testImplementation "org.testcontainers:testcontainers:1.20.0"
    testImplementation "org.testcontainers:localstack:1.20.0"
    testImplementation "org.testcontainers:spock:1.20.0"

    // resilience 4j
    testImplementation 'io.github.resilience4j:resilience4j-retry:1.7.1'
    implementation 'io.github.resilience4j:resilience4j-retry:1.7.1'

    // Peon
    implementation 'com.uberall.peon:peon-sdk-jdk8:2.3.11'


    //other libraries
    implementation "joda-time:joda-time:2.12.7"
    implementation 'org.jadira.usertype:usertype.jodatime:2.0.1'
    implementation 'org.jadira.usertype:usertype.spi:2.0.1'
    implementation 'com.vdurmont:emoji-java:5.1.1' // emoji detection library â€“ supports up to Unicode 11.0 emojis. See changelog: https://github.com/vdurmont/emoji-java/blob/master/CHANGELOG.md

    implementation 'org.apache.commons:commons-lang3:3.18.0' //TODO: check version
    implementation 'org.apache.commons:commons-text:1.14.0' // for StringEscapeUtils (html unescape)

    implementation "org.graalvm.polyglot:polyglot:24.0.0" // Use the latest version compatible with your stack

    //swagger
    implementation "io.swagger.core.v3:swagger-core:$swaggerVersion"
    implementation "io.swagger.core.v3:swagger-annotations:$swaggerVersion"
    implementation "io.swagger.core.v3:swagger-models:$swaggerVersion"
    implementation "io.swagger.core.v3:swagger-integration:$swaggerVersion"
    implementation "io.swagger.core.v3:swagger-jaxrs2:$swaggerVersion"
    implementation "io.swagger.core.v3:swagger-jaxrs2-servlet-initializer:$swaggerVersion"
    implementation "io.swagger.parser.v3:swagger-parser:2.1.27"

    integrationTestImplementation testFixtures("org.apache.grails:grails-geb")
    testImplementation "org.apache.grails:grails-testing-support-datamapping"
    testImplementation "org.apache.grails:grails-testing-support-web"
    testImplementation "org.spockframework:spock-core"
    testImplementation "org.testcontainers:mysql"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

compileJava.options.release = 24

// Enable invokedynamic for Groovy for better runtime performance (and often faster incremental compiles)
tasks.withType(GroovyCompile).configureEach {
    groovyOptions.optimizationOptions.indy = true
    groovyOptions.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    // Parallel test execution (tune: typically number of cores / 2 for heavier integration tests)
    def cores = Runtime.runtime.availableProcessors()
    maxParallelForks = Math.max(1, (int) (cores / 2))
    forkEvery = 0 // reuse forks
    // Conservative memory sizing; adjust as needed based on OOMs
    maxHeapSize = '1024m'
    jvmArgs += ['-XX:+UseG1GC', '-Dfile.encoding=UTF-8']

    testLogging {
        events 'failed'
        exceptionFormat 'short'
        showStandardStreams = false
    }
}

assets {
    excludes = [
            'webjars/jquery/**',
            'webjars/bootstrap/**',
            'webjars/bootstrap-icons/**'
    ]
    includes = [
            'webjars/jquery/*/dist/jquery.js',
            'webjars/bootstrap/*/dist/js/bootstrap.bundle.js',
            'webjars/bootstrap/*/dist/css/bootstrap.css',
            'webjars/bootstrap-icons/*/font/bootstrap-icons.css',
            'webjars/bootstrap-icons/*/font/fonts/*',
    ]
}

// Ensure GSPs and other Grails resources are available to bootRun (dev mode)
sourceSets {
    main {
        resources {
            srcDir 'grails-app/views'
            srcDir 'grails-app/i18n'
            srcDir 'grails-app/conf'
        }
    }
}

// Make sure bootRun serves GSPs from sources and enables reloading
tasks.register('configureBootRun') {
    // Dummy task to ensure configuration after plugins are applied
    doLast {}
}

tasks.named('bootRun') { t ->
    t.dependsOn tasks.named('configureBootRun')
    t.sourceResources sourceSets.main
    t.systemProperty 'spring.output.ansi.enabled', 'always'
    // GSP reloading flags (Grails/Spring Boot integration)
    t.systemProperty 'grails.gsp.enable.reload', 'true'
    t.systemProperty 'spring.gsp.reloading.enabled', 'true'
}

codenarc {
    // Using latest available version
    toolVersion = '3.6.0-groovy-4.0'
    configFile = file('src/main/groovy/uberall/UberallRules.groovy')
}

tasks.withType(org.gradle.api.plugins.quality.CodeNarc).configureEach { t ->
    reports { r ->
        r.html.required.set(true)
        r.html.outputLocation.set(layout.buildDirectory.file("reports/codenarc/${t.name}.html"))
        r.xml.required.set(false)
        r.text.required.set(false)
    }
}
